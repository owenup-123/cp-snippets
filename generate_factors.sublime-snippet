<snippet>
	<content><![CDATA[

// This covers up to 2^64. See http://oeis.org/A066150 and http://oeis.org/A036451
const int FACTORS_MAX = 185000;

vector<ll> generate_factors(const vector<pair<ll, ll>> &prime_factors, bool sorted = false) {
    static ll buffer[FACTORS_MAX];
    int product = 1;
 
    for (auto &pf : prime_factors)
        product *= pf.second;
 
    vector<ll> factors = {1};
    factors.reserve(product);
 
    for (auto &pf : prime_factors) {
        ll p = pf.first;
        int exponent = pf.second;
        int before_size = int(factors.size());
 
        for (int i = 0; i < exponent * before_size; i++)
            factors.push_back(factors[factors.size() - before_size] * p);
 
        if (sorted && factors[before_size - 1] > p)
            for (int section = before_size; section < int(factors.size()); section *= 2)
                for (int i = 0; i + section < int(factors.size()); i += 2 * section) {
                    int length = min(2 * section, int(factors.size()) - i);
                    merge(factors.begin() + i, factors.begin() + i + section, factors.begin() + i + section, factors.begin() + i + length, buffer);
                    copy(buffer, buffer + length, factors.begin() + i);
                }
    }
 
    return factors;
}
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
    <tabTrigger>generate_factors</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<!-- <scope>source.python</scope> -->
</snippet>
