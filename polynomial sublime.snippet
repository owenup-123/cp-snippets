<snippet>
	<content><![CDATA[
namespace ntt {
    int base = 1, root = -1, max_base = -1;
    vector<int> roots = {0, 1}, rev = {0, 1};

    void init() {
        int temp = md - 1;
        max_base = 0;
        while (!(temp & 1)) {
            temp >>= 1;
            ++max_base;
        }
        root = 2;
        while (true) {
            if (power(root, 1 << max_base) == 1 && power(root, 1 << max_base - 1) != 1) {
                break;
            }
            ++root;
        }
    }

    void ensure_base(int nbase) {
        if (max_base == -1) {
            init();
        }
        if (nbase <= base) {
            return;
        }
        assert(nbase <= max_base);
        rev.resize(1 << nbase);
        for (int i = 0; i < (1 << nbase); ++i) {
            rev[i] = rev[i >> 1] >> 1 | ((i & 1) << nbase - 1);
        }
        roots.resize(1 << nbase);
        while (base < nbase) {
            int z = power(root, 1 << max_base - 1 - base);
            for (int i = 1 << base - 1; i < 1 << base; ++i) {
                roots[i << 1] = roots[i];
                roots[i << 1 | 1] = mul(roots[i], z);
            }
            ++base;
        }
    }

    void dft(vector<int> &a) {
        int n = a.size(), zeros = __builtin_ctz(n);
        ensure_base(zeros);
        int shift = base - zeros;
        for (int i = 0; i < n; ++i) {
            if (i < rev[i] >> shift) {
                swap(a[i], a[rev[i] >> shift]);
            }
        }
        for (int i = 1; i < n; i <<= 1) {
            for (int j = 0; j < n; j += i << 1) {
                for (int k = 0; k < i; ++k) {
                    int x = a[j + k], y = mul(a[j + k + i], roots[i + k]);
                    a[j + k] = add(x, y);
                    a[j + k + i] = sub(x, y);
                }
            }
        }
    }

    vector<int> padd(vector<int> a, vector<int> b) {
        if (a.size() < b.size()) {
            a.resize(b.size());
        }
        for (int i = 0; i < b.size(); ++i) {
            a[i] = add(a[i], b[i]);
        }
        return a;
    }

    vector<int> psub(vector<int> a, vector<int> b) {
        if (a.size() < b.size()) {
            a.resize(b.size());
        }
        for (int i = 0; i < b.size(); ++i) {
            a[i] = sub(a[i], b[i]);
        }
        return a;
    }

    vector<int> pmul(vector<int> a, vector<int> b, bool equal = false) {
        int need = a.size() + b.size() - 1, nbase = 0;
        while (1 << nbase < need) {
            ++nbase;
        }
        ensure_base(nbase);
        int size = 1 << nbase;
        a.resize(size);
        b.resize(size);
        dft(a);
        if (equal) {
            b = a;
        } else {
            dft(b);
        }
        int inv = power(size, md - 2);
        for (int i = 0; i < size; ++i) {
            a[i] = mul(mul(a[i], b[i]), inv);
        }
        reverse(a.begin() + 1, a.end());
        dft(a);
        a.resize(need);
        return a;
    }

    vector<int> psqr(vector<int> a) {
        return pmul(a, a, true);
    }

    vector<int> pinv(vector<int> a) {
        int n = a.size(), m = n + 1 >> 1;
        if (n == 1) {
            return vector<int> (1, power(a[0], md - 2));
        } else {
            vector<int> b = pinv(vector<int> (a.begin(), a.begin() + m));
            int need = n << 1, nbase = 0;
            while (1 << nbase < need) {
                ++nbase;
            }
            ensure_base(nbase);
            int size = 1 << nbase;
            a.resize(size);
            b.resize(size);
            dft(a);
            dft(b);
            int inv = power(size, md - 2);
            for (int i = 0; i < size; ++i) {
                a[i] = mul(mul(sub(2, mul(a[i], b[i])), b[i]), inv);
            }
            reverse(a.begin() + 1, a.end());
            dft(a);
            a.resize(n);
            return a;
        }
    }

    vector<int> pdiv(vector<int> a, vector<int> b) {
        int n = a.size(), m = b.size();
        if (n < m) {
            return vector<int> ();
        }
        reverse(a.begin(), a.end());
        reverse(b.begin(), b.end());
        b.resize(n - m + 1);
        b = pmul(a, pinv(b));
        b.erase(b.begin() + n - m + 1, b.end());
        reverse(b.begin(), b.end());
        return b;
    }

    vector<int> pmod(vector<int> a, vector<int> b) {
        int n = a.size(), m = b.size();
        if (n < m) {
            return a;
        }
        vector<int> c = pmul(pdiv(a, b), b);
        for (int i = 0; i < m - 1; ++i) {
            c[i] = sub(a[i], c[i]);
        }
        c.resize(m - 1);
        return c;
    }

    vector<int> pdiff(vector<int> a)
    {
        int n=a.size();
        for(int i=0;i<n-1;i++)
            a[i]=mul(i+1,a[i+1]);
        a.pop_back();
        // a[n-1]=0;
        return a;
    }

}

vector<int> multipoint(vector<int> poly, vector<int> a) // multipoint evaluaion (outside ntt namspace)
{
    int n=a.size();
    vector<vector<int>> segtree((n << 1) - 1);
    function<void(int, int, int)> build = [&](int x, int l, int r) {
        if (l == r) {
            segtree[x] = vector<int> {sub(0,a[l]), 1};
        } else {
            int y = l + r >> 1, z = x + (y - l + 1 << 1);
            build(x + 1, l, y);
            build(z, y + 1, r);
            segtree[x] = ntt::pmul(segtree[x + 1], segtree[z]);
        }
    };

    function<void(int, int, int, vector<int>, vector<int>&)> evaluate = [&](int x, int l, int r, vector<int> f, vector<int> &answer) {
        f = ntt::pmod(f, segtree[x]);
        if (l == r) {
            answer[l] = f[0];
        } else {
            int y = l + r >> 1, z = x + (y - l + 1 << 1);
            evaluate(x + 1, l, y, f, answer);
            evaluate(z, y + 1, r, f, answer);
        }
    };

    build(0, 0, n - 1);
    vector<int> res(n);
    evaluate(0, 0, n - 1, poly, res);
    return res;
}

int n,x;
vector<int> a;
vector<int> poly;
//vector<int> ans;

vector<int> initPoly(int l,int r) // vector a contains the roots of a polynomial, so this gives the poly after all multiplications
{
    if(l==r)
        return {sub(0,a[l]),1};
    int m=(l+r)/2;
    vector<int> lPoly=initPoly(l,m);
    vector<int> rPoly=initPoly(m+1,r);
    return ntt::pmul(lPoly,rPoly);
}

void printArr(vector<int> b)
{
    for(auto c:b)
    {
        cout<<c<<" ";
    }
    cout<<endl;
}

// To use ntt functions /- poly = ::ntt (function)
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	 <tabTrigger>polynomial</tabTrigger> 
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<!-- <scope>source.python</scope> -->
</snippet>
