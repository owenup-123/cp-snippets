public class JTail {

    private final String fileName;
    private final int noOfLines;

    private Path watchDirectory;

    public JTail(final String fileName, final int noOfLines) {
        if (fileName == null || fileName.isEmpty() || noOfLines <= 0) {
            throw new IllegalStateException(String.format("INVALID [filename:%s], [noOfLines:%d]", fileName,
                                                          noOfLines));
        }
        this.fileName = fileName;
        this.noOfLines = noOfLines;
    }

    public void setWatchDirectory(final Path watchDirectory) {
        this.watchDirectory = watchDirectory;
    }

    public void tailOnline() throws IOException, InterruptedException {
        if (watchDirectory == null) return;
        final var watchService = FileSystems.getDefault().newWatchService();
        watchDirectory.register(
                watchService,
                StandardWatchEventKinds.ENTRY_MODIFY);
        WatchKey key;
        while ((key = watchService.take()) != null) {
            for (final WatchEvent<?> event : key.pollEvents()) {
                System.out.printf("%s", tail());
            }
            key.reset();
        }
    }

    public String tail() throws IOException {
        try (final var filePtr = new RandomAccessFile(fileName, "r")) {
            final long fileSize = filePtr.length();
            filePtr.seek(fileSize - 1);

            long newLineCount = 0L;
            final var lastNLines = new StringBuilder();

            // read file in reverse and look for '\n'
            for (long i = fileSize - 1; i != -1; i--) {
                filePtr.seek(i);
                final int readByte = filePtr.readByte();
                final char c = (char) readByte;
                if ((c == '\n') || (System.lineSeparator()
                                          .equals(String.valueOf(c)))) {
                    ++newLineCount;
                    if (newLineCount > noOfLines) {
                        break;
                    }
                }
                lastNLines.append(c);
            }

            lastNLines.reverse();
            return lastNLines.toString();
        }
    }
}

public class PeriodicFileWriter implements Runnable {

    private final Path filePath;
    private final AtomicInteger counter = new AtomicInteger();

    public PeriodicFileWriter(final Path filePath) {
        this.filePath = filePath;
        try {
            Files.write(filePath, String.format("This is the header line%n").getBytes(StandardCharsets.UTF_8));
        } catch (final IOException e) {
            e.printStackTrace();
        }
    }

    @Override
    public void run() {
        final String str = String.format("This is the %d line.%n", counter.addAndGet(1));
        final byte[] strToBytes = str.getBytes(StandardCharsets.UTF_8);
        try {
            Files.write(filePath, strToBytes, StandardOpenOption.APPEND);
        } catch (final IOException e) {
            e.printStackTrace();
        }
    }
}

class Solution {
    char[] arr;
    int index = 0;

    public int calculate(String s) {
        arr = s.toCharArray();
        return dfs();
    }

    private int dfs() {
        Stack<Integer> stack = new Stack<>();
        char operator = '+';

        // Get rid of * and /
        while (index < arr.length) {
        //    if (arr[index] != ' ') {
                if (Character.isDigit(arr[index])) {
                    // build the number
                    StringBuilder buildNum = new StringBuilder();
                    while (index < arr.length && Character.isDigit(arr[index])) {
                        buildNum.append(arr[index++]);
                    }
                    index--;

                    int curNum = Integer.parseInt(buildNum.toString());
                    insertElement(stack, curNum, operator);
                } else if (arr[index] == '(') {
                    index++;
                    int curNum = dfs();
                    insertElement(stack, curNum, operator);
                } else if (arr[index] == ')') {
                    break;
                } else {
                    operator = arr[index];
                }
         //   }
            index++;
        }

        int total = 0;
        while (!stack.isEmpty()) {
            total += stack.pop();
        }
        return total;
    }

    private void insertElement(Stack<Integer> stack, int curNum, char operator) {
        if (operator == '-') {
            curNum *= -1;
        } else if (operator == '*') {
            curNum *= stack.pop();
        } else if (operator == '/') {
            curNum = stack.pop() / curNum;
        }
        stack.push(curNum);
    }
}
