<snippet>
	<content><![CDATA[
#pragma GCC optimze("Ofast")
#include "bits/stdc++.h"
using namespace std;
using base = complex<double>;
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
#define mod 1000000007
#define M2 998244353
#define ll long long
#define ld long double
#define pll pair<ll,ll>
#define inf 1e18
#define fl(i,a,b) for(ll i=a;i<b;i++)
#define ff first
#define ss second
#define pb push_back
#define mp make_pair
#define vll vector<ll>
#define N 1000005
#define all(c) c.begin(),c.end()
#define sz(s) (int)s.size()

#define o_set(T) tree<T, null_type,less<T>, rb_tree_tag,tree_order_statistics_node_update>
//member functions :
//to delete an element
//s.erase(s.find_by_order(s.order_of_key(ele)));
//1. order_of_key(k) : number of elements strictly lesser than k
//2. find_by_order(k) : k-th element in the set

int add(int x, int y) {
    x += y;
    if (x >= mod) {
        x -= mod;
    }
    return x;
}

int sub(int x, int y) {
    x -= y;
    if (x < 0) {
        x += mod;
    }
    return x;
}

int mul(int x, int y) {
    return (long long)x * y % mod;
}


void solve()
{
   

}


signed main()
{
   std::ios::sync_with_stdio(false);
   int T=1;
   cin>>T;
   // cin.ignore(); must be there when using getline(cin, s)
   while(T--)
   {
      solve();
   }
   return 0;
}

]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	 <tabTrigger>template</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<!-- <scope>source.python</scope> -->
</snippet>
