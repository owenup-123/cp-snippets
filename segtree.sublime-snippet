<snippet>
	<content><![CDATA[
struct deta
{
  //Use required attributes
  ll mn;

  //Default Values
  deta() : mn(-1) {};
};

struct SegTree
{
  ll x;
  vector<deta> st;
  vector<bool> cLazy;
  vector<ll> lazy;

  void init(ll n)
  {
    x = n;
    st.resize(4 * x + 5);
    cLazy.assign(4 * x + 5, false);
    lazy.assign(4 * x + 5, 0);
  }

  //Write reqd merge functions
  void merge(deta &cur, deta &l, deta &r) 
  {
    cur.mn = max(l.mn, r.mn);
  }
  
  //Handle lazy propagation appriopriately
  void propagate(ll node, ll L, ll R)
  {
    if(L != R)
    {
      cLazy[node*2] = 1;
      cLazy[node*2 + 1] = 1;
      lazy[node*2] = lazy[node] ;
      lazy[node*2 + 1] = lazy[node]; 
      lazy[node] = 0;
    }
    st[node].mn = lazy[node];
    cLazy[node] = 0;
  }

  void build(ll node, ll L, ll R)
  {
    if(L==R)
    {
      st[node].mn = input[L];
      return;
    }
    ll M=(L + R)/2;
    build(node*2, L, M);
    build(node*2 + 1, M + 1, R);
    merge(st[node], st[node*2], st[node*2+1]);
  }

  deta Query(ll node, ll L, ll R, ll i, ll j)
  {
    if(cLazy[node])
      propagate(node, L, R);
    if(j<L || i>R)
      return deta();
    if(i<=L && R<=j)
      return st[node];
    ll M = (L + R)/2;
    deta left=Query(node*2, L, M, i, j);
    deta right=Query(node*2 + 1, M + 1, R, i, j);
    deta cur;
    merge(cur, left, right);
    return cur;
  }

  deta pQuery(ll node, ll L, ll R, ll pos)
  {
    if(cLazy[node])
      propagate(node, L, R);
    if(L == R)
      return st[node];
    ll M = (L + R)/2;
    if(pos <= M)
      return pQuery(node*2, L, M, pos);
    else
      return pQuery(node*2 + 1, M + 1, R, pos);
  }  

  void Update(ll node, ll L, ll R, ll i, ll j, ll val)
  {
    if(cLazy[node])
      propagate(node, L, R);
    if(j<L || i>R)
      return;
    if(i<=L && R<=j)
    {
      cLazy[node] = 1;
      lazy[node] = val;
      propagate(node, L, R);
      return;
    }
    ll M = (L + R)/2;
    Update(node*2, L, M, i, j, val);
    Update(node*2 + 1, M + 1, R, i, j, val);
    merge(st[node], st[node*2], st[node*2 + 1]);
  }

  void pUpdate(ll node, ll L, ll R, ll pos, ll val)
  {
    if(cLazy[node])
      propagate(node, L, R);
    if(L == R)
    {
      cLazy[node] = 1;
      lazy[node] = val;
      propagate(node, L, R);
      return;
    }
    ll M = (L + R)/2;
    if(pos <= M)
      pUpdate(node*2, L, M, pos, val);
    else
      pUpdate(node*2 + 1, M + 1, R, pos, val);
    merge(st[node], st[node*2], st[node*2 + 1]);
  }

  deta query(ll pos)
  {
    return pQuery(1, 1, x, pos);
  }

  deta query(ll l, ll r)
  {
    return Query(1, 1, x, l, r);
  }

  void update(ll pos, ll val)
  {
    pUpdate(1, 1, x, pos, val);
  }

  void update(ll l, ll r, ll val)
  {
    Update(1, 1, x, l, r, val);
  }
};

SegTree st;

void build(ll n)
{
  st.init(n);
  st.build(1,1,n);
}
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	 <tabTrigger>segtree</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<!-- <scope>source.python</scope> -->
</snippet>
